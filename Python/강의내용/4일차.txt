구조적 프로그래밍 -> 객체지향 프로그래밍 -> 일반화프로그래밍 -> 함수화 프로그래밍
변수 + 함수 -> 클래스(객체)-instance (object)
		{캡슐화 - 변수보호: 접근지점__ (언더바두개) private
		추상화 - 함수에 메시지를 전달한다
		상속성 - class 작성 => 공통부분(부모) => 자식
		다형성 - overloading, overriding},연산자 오버로딩 ->오버라이딩(defalt)
		(object ( 속성 __class__ , __dict__)) 변수랑 속성이랑 같은말
		앞뒤에 __ 언더바 두개가 붙어있으면 상속받은거임.
		__str__ , ___repr___ 
함수 -> class
class -> 함수  / __call__ 쓰면 가능.
1. 초기화 __init__( ) , 생성자
2. 소멸자 heap
3. 변수 ,함수 (클래스 안에서 변수 선언시 self)
4. 멤버변수: 장소무관 , 실시간 추가/가능
5. class변수: 공유, 멤버변수:self(종속변수), 지역변수: